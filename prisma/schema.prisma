generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Game {
  id            BigInt         @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  mapRadius     Int
  turnLimit     Int
  userName      String         @db.VarChar(50)
  gameCivs      GameCiv[]
  mapTiles      MapTile[]
  turnSnapshots TurnSnapshot[]
}

model CivType {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  personality   PersonalityType
  leaderName    String          @db.VarChar(50)
  gameCivs      GameCiv[]
  leaderProfile LeaderProfile?
}

model GameCiv {
  id                BigInt              @id @default(autoincrement())
  civTypeId         Int
  gameId            BigInt
  isPlayer          Boolean
  startQ            Int
  startR            Int
  adviceRequests    AdviceRequest[]
  cities            City[]
  receivedSessions  DiplomacySession[]  @relation("TargetCiv")
  diplomacySessions DiplomacySession[]  @relation("InitiatorCiv")
  civType           CivType             @relation(fields: [civTypeId], references: [id])
  game              Game                @relation(fields: [gameId], references: [id])
  technologies      GameCivTechnology[]
  units             GameUnit[]
  buildings         PlayerBuilding[]
  researchQueues    ResearchQueue[]
  treeSelections    TreeSelection[]

  @@index([civTypeId], map: "GameCiv_civTypeId_fkey")
  @@index([gameId], map: "GameCiv_gameId_fkey")
}

model MapTile {
  q        Int
  r        Int
  terrain  String       @db.VarChar(20)
  resource ResourceType
  gameId   BigInt
  game     Game         @relation(fields: [gameId], references: [id])

  @@id([gameId, q, r])
}

model City {
  id              BigInt            @id @default(autoincrement())
  name            String            @db.VarChar(50)
  q               Int
  r               Int
  population      Int
  createdTurn     Int
  gameCivId       BigInt
  gameCiv         GameCiv           @relation(fields: [gameCivId], references: [id])
  buildings       PlayerBuilding[]
  productionQueue ProductionQueue[]

  @@index([gameCivId], map: "City_gameCivId_fkey")
}

model Technology {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(50)
  description          String              @db.Text
  era                  EraType
  researchCost         Int
  researchTimeModifier Float
  treeType             String              @db.VarChar(50)
  buildings            Building[]
  gameCivTechnologies  GameCivTechnology[]
  prerequisiteFor      Prerequisite[]      @relation("PrereqTech")
  prerequisites        Prerequisite[]      @relation("CurrentTech")
  researchQueues       ResearchQueue[]
  unitTypes            UnitType[]
}

model Prerequisite {
  id       BigInt     @id @default(autoincrement())
  prereqId Int
  techId   Int
  prereq   Technology @relation("PrereqTech", fields: [prereqId], references: [id])
  tech     Technology @relation("CurrentTech", fields: [techId], references: [id])

  @@index([prereqId], map: "Prerequisite_prereqId_fkey")
  @@index([techId], map: "Prerequisite_techId_fkey")
}

model GameCivTechnology {
  id             BigInt         @id @default(autoincrement())
  status         ResearchStatus
  completedAt    DateTime?
  gameCivId      BigInt
  progressPoints Int            @default(0)
  startedAt      DateTime?
  techId         Int
  gameCiv        GameCiv        @relation(fields: [gameCivId], references: [id])
  technology     Technology     @relation(fields: [techId], references: [id])

  @@index([gameCivId], map: "GameCivTechnology_gameCivId_fkey")
  @@index([techId], map: "GameCivTechnology_techId_fkey")
}

model TreeSelection {
  id         BigInt   @id @default(autoincrement())
  gameCivId  BigInt
  isMain     Boolean
  selectedAt DateTime @default(now())
  treeType   String   @db.VarChar(50)
  gameCiv    GameCiv  @relation(fields: [gameCivId], references: [id])

  @@index([gameCivId], map: "TreeSelection_gameCivId_fkey")
}

model ResearchQueue {
  id            BigInt     @id @default(autoincrement())
  addedAt       DateTime   @default(now())
  gameCivId     BigInt
  queuePosition Int
  techId        Int
  gameCiv       GameCiv    @relation(fields: [gameCivId], references: [id])
  technology    Technology @relation(fields: [techId], references: [id])

  @@index([gameCivId], map: "ResearchQueue_gameCivId_fkey")
  @@index([techId], map: "ResearchQueue_techId_fkey")
}

model UnitType {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(50)
  category     UnitCategory
  era          EraType
  maintenance  Int
  movement     Int
  sight        Int
  buildTime    Int
  prereqTechId Int?
  gameUnits    GameUnit[]
  prereqTech   Technology?  @relation(fields: [prereqTechId], references: [id])

  @@index([prereqTechId], map: "UnitType_prereqTechId_fkey")
}

model GameUnit {
  id             BigInt   @id @default(autoincrement())
  q              Int
  r              Int
  hp             Int
  moved          Boolean  @default(false)
  createdTurn    Int
  gameCivId      BigInt
  promotionLevel Int      @default(0)
  unitTypeId     Int
  gameCiv        GameCiv  @relation(fields: [gameCivId], references: [id])
  unitType       UnitType @relation(fields: [unitTypeId], references: [id])

  @@index([gameCivId], map: "GameUnit_gameCivId_fkey")
  @@index([unitTypeId], map: "GameUnit_unitTypeId_fkey")
}

model ProductionQueue {
  id         BigInt   @id @default(autoincrement())
  addedAt    DateTime @default(now())
  cityId     BigInt
  itemId     Int
  itemType   ItemType
  queueOrder Int
  turnsLeft  Int
  city       City     @relation(fields: [cityId], references: [id])

  @@index([cityId], map: "ProductionQueue_cityId_fkey")
}

model Building {
  id                 Int              @id @default(autoincrement())
  name               String           @db.VarChar(50)
  category           String           @db.VarChar(50)
  description        String           @db.Text
  buildTime          Int
  maintenanceCost    Int
  prerequisiteTechId Int?
  resourceCost       Int
  buildQueues        BuildQueue[]
  prerequisiteTech   Technology?      @relation(fields: [prerequisiteTechId], references: [id])
  playerBuildings    PlayerBuilding[]

  @@index([prerequisiteTechId], map: "Building_prerequisiteTechId_fkey")
}

model PlayerBuilding {
  id          BigInt      @id @default(autoincrement())
  status      BuildStatus
  buildingId  Int
  cityId      BigInt
  completedAt DateTime?
  gameCivId   BigInt
  startedAt   DateTime?
  building    Building    @relation(fields: [buildingId], references: [id])
  city        City        @relation(fields: [cityId], references: [id])
  gameCiv     GameCiv     @relation(fields: [gameCivId], references: [id])

  @@index([buildingId], map: "PlayerBuilding_buildingId_fkey")
  @@index([cityId], map: "PlayerBuilding_cityId_fkey")
  @@index([gameCivId], map: "PlayerBuilding_gameCivId_fkey")
}

model BuildQueue {
  id            BigInt   @id @default(autoincrement())
  addedAt       DateTime @default(now())
  buildingId    Int
  cityId        BigInt
  queuePosition Int
  building      Building @relation(fields: [buildingId], references: [id])

  @@index([buildingId], map: "BuildQueue_buildingId_fkey")
}

model DiplomacySession {
  personality       PersonalityType
  aiCivId           BigInt
  gameCivId         BigInt
  relationshipScore Int
  sessionId         BigInt            @id @default(autoincrement())
  diplomacyActions  DiplomacyAction[]
  aiCiv             GameCiv           @relation("TargetCiv", fields: [aiCivId], references: [id])
  gameCiv           GameCiv           @relation("InitiatorCiv", fields: [gameCivId], references: [id])

  @@index([aiCivId], map: "DiplomacySession_aiCivId_fkey")
  @@index([gameCivId], map: "DiplomacySession_gameCivId_fkey")
}

model DiplomacyAction {
  id         BigInt           @id @default(autoincrement())
  turn       Int
  terms      Json
  delta      Int
  actionType ActionType
  newScore   Int
  sessionId  BigInt
  session    DiplomacySession @relation(fields: [sessionId], references: [sessionId])

  @@index([sessionId], map: "DiplomacyAction_sessionId_fkey")
}

model AdviceRequest {
  id        BigInt   @id @default(autoincrement())
  turn      Int
  createdAt DateTime @default(now())
  gameCivId BigInt
  usedCount Int
  gameCiv   GameCiv  @relation(fields: [gameCivId], references: [id])

  @@index([gameCivId], map: "AdviceRequest_gameCivId_fkey")
}

model TurnSnapshot {
  id              BigInt   @id @default(autoincrement())
  civId           BigInt
  createdAt       DateTime @default(now())
  diplomacyState  Json
  gameId          BigInt
  observedMap     Json
  productionState Json
  researchState   Json
  turnNumber      Int
  game            Game     @relation(fields: [gameId], references: [id])

  @@index([gameId], map: "TurnSnapshot_gameId_fkey")
}

model LeaderProfile {
  id                 BigInt          @id @default(autoincrement())
  backstory          String?
  personality        PersonalityType
  civTypeId          Int             @unique
  createdAt          DateTime        @default(now())
  fullName           String          @db.VarChar(100)
  imageUrl           String?         @db.VarChar(255)
  preferredVictories String?
  updatedAt          DateTime        @updatedAt
  civType            CivType         @relation(fields: [civTypeId], references: [id])
}

enum PersonalityType {
  Diplomat
  Warlike
  Pacifist
  Trader
}

enum ResourceType {
  NoResource
  Food
  Production
  Gold
  Science
}

enum ResearchStatus {
  locked
  available
  in_progress
  completed
}

enum UnitCategory {
  Melee
  Ranged
  Cavalry
  Siege
  Modern
}

enum EraType {
  Medieval
  Industrial
  Modern
}

enum ItemType {
  unit
  building
}

enum BuildStatus {
  queued
  in_progress
  completed
}

enum ActionType {
  declare_friendship
  propose_trade
  declare_war
  make_peace
  offer_alliance
}
